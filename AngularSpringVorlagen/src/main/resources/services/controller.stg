group controller;

overwrite(model) ::= "true"
create(model) ::= "true"

mypfad() ::= "controller"


controller(model) ::= "$model.name$Controller"

service(model) ::= "$model.name$Service"

dateiName(model) ::= "$mypfad()$/$controller(model)$.java"

dateiInhalt(model) ::= <<

$DATA(model,model.name,mypfad())$

>>

DATA(x,classname,pfad) ::= <<

package $pfad$;

import java.util.Optional;
import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import services.$service(model)$;


@Slf4j
@RestController
@CrossOrigin(origins = "https://localhost:4200", maxAge = 3600)
@RequestMapping("/api")
public class $controller(model)$ {

	@Autowired
	private $service(model)$ service;


	public $controller(model)$() {
		super();
	}

	@CrossOrigin
	@RequestMapping(path = "/action/$model.name$", produces = "application/json", method = RequestMethod.POST)
	public String generateTestdaten(
	                  @RequestParam(name = "monat") int monat, 
	                  @RequestParam(name = "jahr") int jahr) {

		try {
			service.service(new MonatJahr(monat, jahr));
		} catch (Exception e) {
			log.error("Exception in " + this.getClass().getCanonicalName() + ".generateTestdaten", e);
			return "Beim Abarbeiten der $service(model)$ trat ein Fehler auf";
		}

		return "Der Service $service(model)$ wurden erfolgreich abgearbeitet";
	}
}
>>