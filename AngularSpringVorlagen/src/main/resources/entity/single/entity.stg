group entity ;

overwrite(model) ::= "true"
create(model) ::= "$model.clazzValue.entity$"

mypfad() ::= "entities"

dateiName(model) ::= "$mypfad()$/$model.clazz.simpleName$.java"

dateiInhalt(model) ::= <<

$DATA(model,model.clazz.simpleName,mypfad())$

>>

DATA(x,classname,pfad) ::= <<
package $pfad$;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.List;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Enumerated;
import javax.persistence.Lob;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

    $x.fieldSichten:importDefinition()$
    $x.fieldSichten:entitiesImportDefinition()$
    
import interfaces.I$classname; format="cap"$;

@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@ToString(onlyExplicitlyIncluded = true)
@Entity
@Table(name = "$classname; format="upper"$")
@SequenceGenerator(name = "$classname; format="upper"$_SEQ", sequenceName = "$classname; format="upper"$_SEQ")
public class $classname$ implements I$classname; format="cap"$ {

    @EqualsAndHashCode.Include
    @ToString.Include
    @Basic
    @Column(name = "$classname; format="upper"$ID")
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "$classname; format="upper"$_SEQ")
    private java.lang.Long $classname$Id;

    $x.fieldSichten:elements(classname)$
}

>>

importDefinition(v) ::= <<
$if(!v.clazz.PrimitiveType)$
$if(!v.clazz.array)$
$if(!v.clazz.objectModell)$
import $v.clazz.canonicalName$;
$endif$
$endif$
$endif$
>>


entitiesImportDefinition(v) ::= <<
$if(v.source)$
$if(v.source.objectModell)$
import interfaces.I$v.source.simpleName$;
$endif$
$endif$

$if(v.target)$
$if(v.target.objectModell)$
import interfaces.I$v.target.simpleName$;
$endif$
$endif$
>>


elements(v,classname) ::= <<
    $v.annotations$
    $documentation(v)$
    // Kind: ($v.kind$)

 	$(v.kind)(v,classname)$
>>

documentation(v) ::= <<
   $if(! v.documentation.empty)$
    /**
     $v.documentation$
     */$endif$
 >>


enumeration(v,classname) ::= <<	
    @Enumerated
    @Column(name = "$v.name; format="upper"$")
    private $v.clazz.typeDefinition$ $v.name$;


    public $v.clazz.typeDefinition$ get$v.name; format="cap"$() {
    	return $v.name$;
    }
    
    public void set$v.name; format="cap"$($v.clazz.typeDefinition$ value) {
    	$v.name$ = value;
    }
>>

timevalues(v,classname,columnDefinition) ::= <<	
	
    @Column(name = "$v.name; format="upper"$", columnDefinition = "$columnDefinition$")
    $converter(v.clazz)$
    private $v.clazz.typeDefinition$ $v.name$;


    public $v.clazz.typeDefinition$ get$v.name; format="cap"$() {
    	return $v.name$;
    }
    
    public void set$v.name; format="cap"$($v.clazz.typeDefinition$ value) {
    	$v.name$ = value;
    }

>>

LocalTime(v,classname) ::= <<
	$timevalues(v,classname,"TIME")$
>>

LocalDate(v,classname) ::= <<
	$timevalues(v,classname,"DATE")$
>>

LocalDateTime(v,classname) ::= <<
	$timevalues(v,classname,"TIMESTAMP")$
>>

OffsetTime(v,classname) ::= <<
	$timevalues(v,classname,"TIME WITH TIME ZONE")$
>>

OffsetDateTime(v,classname) ::= <<
	$timevalues(v,classname,"TIMESTAMP WITH TIME ZONE")$
>>

ByteBLOB(v,classname) ::= <<
	@Lob
    @Column(name = "$v.name; format="upper"$")
    $converter(v.clazz)$
    private byte[] $v.name$;
>>	

CharBLOB(v,classname) ::= <<
	@Lob
    @Column(name = "$v.name; format="upper"$")
    $converter(v.clazz)$
    private String $v.name$;
>>	
	
	
value(v,classname) ::= <<	
	@Basic
    @Column(name = "$v.name; format="upper"$")
    $converter(v.clazz)$
    private $v.clazz.typeDefinition$ $v.name$;


    public $v.clazz.typeDefinition$ get$v.name; format="cap"$() {
    	return $v.name$;
    }
    
    public void set$v.name; format="cap"$($v.clazz.typeDefinition$ value) {
    	$v.name$ = value;
    }

>>

valueCollection(v,classname) ::= <<	
	@Basic
    $converter(v.clazz)$
    @ElementCollection
    @CollectionTable(name = "$classname$_$v.name$", joinColumns = @JoinColumn(name = "$v.source.simpleName$Id"))

    private $v.clazz.typeDefinition$ $v.name$;

    @Override
    public void add$v.name; format="cap"$($v.clazz.collectionTypeDefinition$ x) {
        this.$v.name$.add(x);
    }

    @Override
    public void remove$v.name; format="cap"$($v.clazz.collectionTypeDefinition$ x) {
        this.$v.name$.remove(x);
    }

>>

valueArray(v,classname) ::= <<	
	@Basic
    $converter(v.clazz)$
    @ElementCollection
    @CollectionTable(name = "$classname$_$v.name$", joinColumns = @JoinColumn(name = "$v.source.simpleName$Id"))

    private List<$v.clazz.arrayListTypeDefinition$> $v.name$ = new ArrayList<>();

  //  private $v.clazz.typeDefinition$ $v.name$;

	public $v.clazz.arrayListTypeDefinition$[] get$v.name; format="cap"$() {
		return this.$v.name$.toArray(new $v.clazz.arrayListTypeDefinition$[0]);
    }


    @Override
    public void add$v.name; format="cap"$($v.clazz.arrayTypeDefinition$ x) {
        this.$v.name$.add(x);
    }

    @Override
    public void remove$v.name; format="cap"$($v.clazz.arrayTypeDefinition$ x) {
        this.$v.name$.remove(x);
    }

>>


fromone2many(v,classname) ::= << 

    @OneToMany(cascade = CascadeType.ALL, 
               mappedBy = "$v.sourceName$", 
               orphanRemoval = true
               )
    private Set<$v.target.simpleName$> $v.targetName$ = new HashSet<>();


    @Override
    public void add$v.targetName; format="cap"$(I$v.target.simpleName$ x) {
        this.$v.targetName$.add(($v.target.simpleName$)x);
        x.set$v.sourceName; format="cap"$(this);
    }

    @Override
    public void remove$v.targetName; format="cap"$(I$v.target.simpleName$ x) {
        this.$v.targetName$.remove(($v.target.simpleName$)x);
        x.set$v.sourceName; format="cap"$(null);
    }


>>

toone2many(v,classname) ::= <<

  	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "$v.source.simpleName$_Id")
	private $v.source.simpleName$ $v.sourceName$;

    @Override
    public void set$v.sourceName; format="cap"$(I$v.source.simpleName$ value) {
 	   $v.sourceName$ = ($v.source.simpleName$) value;
    }


>>


frommany2many(v,classname) ::= << 
    @ManyToMany(cascade = { CascadeType.ALL }, 
                fetch = FetchType.LAZY)
    @JoinTable(name = "$v.source.simpleName$_$v.target.simpleName$", 
    joinColumns = { @JoinColumn(name = "$v.source.simpleName$Id") }, 
    inverseJoinColumns = { @JoinColumn(name = "$v.target.simpleName$Id") })
    private Set<$v.target.simpleName$> $v.targetName$ = new HashSet<>();

    @Override
    public void add$v.targetName; format="cap"$(I$v.target.simpleName$ x) {
        this.$v.targetName$.add(($v.target.simpleName$)x);
    }
    
    @Override 
    public void remove$v.targetName; format="cap"$(I$v.target.simpleName$ x) {
        this.$v.targetName$.remove(($v.target.simpleName$)x);
 	}
>>

tomany2many(v,classname) ::= << 
    @ManyToMany(mappedBy = "$v.targetName$")
    private Set<$v.source.simpleName$> $v.sourceName$ = new HashSet<>();

    @Override
    public void add$v.sourceName; format="cap"$(I$v.source.simpleName$ x) {
        this.$v.sourceName$.add(($v.source.simpleName$)x);
    }
     
    @Override
    public void remove$v.sourceName; format="cap"$(I$v.source.simpleName$ x) {
        this.$v.sourceName$.remove(($v.source.simpleName$)x);
    }

>>


fromone2one(v,classname) ::= << 
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "$v.target.simpleName$_Id", 
                referencedColumnName = "$v.source.simpleName$_Id")
    private $v.target.simpleName$ $v.targetName$;

    @Override
    public void set$v.targetName; format="cap"$(I$v.target.simpleName$ $v.name$) {
 	   this.$v.targetName$ = ($v.target.simpleName$) $v.name$;
    }

>>

toone2one(v,classname) ::= << 
    @OneToOne(mappedBy = "$v.targetName$")
    private $v.source.simpleName$ $v.sourceName$;


 	@Override
    public void set$v.sourceName; format="cap"$(I$v.source.simpleName$ $v.name$) {
 	   this.$v.sourceName$ = ($v.source.simpleName$) $v.name$;
    }

>>

fromone2oneEmbedabble(v,classname) ::= << 

    @Embedded
    @AttributeOverrides({
         $v.target.clazz.fields:attributeOverride("",v.targetName)$
    })
    private $v.target.simpleName$ $v.targetName$;


>>

zusammen1(feldName,name) ::= <<$if(feldName.empty)$$name$$else$$feldName$.$name$$endif$>>

zusammen2(feldName,name) ::= <<$if(feldName.empty)$$name$$else$$feldName$_$name$$endif$>>

attributeOverride(f,feldName,entityfeldName) ::= << 
$if(f.embeddable)$
$f.type.fields:attributeOverride(zusammen1(feldName,f.name),zusammen2(entityfeldName,f.name))$
$else$
@AttributeOverride(name = "$zusammen1(feldName,f.name)$", column = @Column(name = "$zusammen2(entityfeldName,f.name)$")),
$endif$
>>

fromone2manyEmbedabble(v,classname) ::= << 

    @ElementCollection
    @CollectionTable(name = "$v.name$_$v.source.simpleName$_$v.target.simpleName$", joinColumns = @JoinColumn(name = "$v.source.simpleName$Id"))
    private Set<$v.target.simpleName$> $v.targetName$ = new HashSet<>();


    @Override
    public void add$v.targetName; format="cap"$($v.target.simpleName$ x) {
        this.$v.targetName$.add(x);
    }

    @Override
    public void remove$v.targetName; format="cap"$($v.target.simpleName$ x) {
        this.$v.targetName$.remove(x);
    }
    
>>


converter(v) ::= << $if(v.withConverter)$@Convert(converter = $v.converterClass.canonicalName$.class)$endif$>>

entity() ::= <<
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

import org.nill.abrechnung.interfaces.IAbrechnung;
import org.nill.abrechnung.interfaces.IBuchung;
import org.nill.abrechnung.values.KontoBewegung;
import org.nill.allgemein.values.TypeReference;

@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@ToString(onlyExplicitlyIncluded = true)
@Entity
@Table(name = "BUCHUNG")
@SequenceGenerator(name = "BUCHUNG_SEQ", sequenceName = "BUCHUNG_SEQ")
public class Buchung implements IBuchung {

    @EqualsAndHashCode.Include
    @ToString.Include
    @Basic
    @Column(name = "BUCHUNGID")
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "BUCHUNG_SEQ")
    private java.lang.Long buchungId;

    @Basic
    @Column(name = "BUCHUNGSDATUM")
    private Date buchungsDatum;

    @ToString.Include
    @Basic
    @Column(name = "TEXT")
    private String text;

    @EqualsAndHashCode.Include
    @ToString.Include
    @Basic
    @Column(name = "ART")
    private int art;

    @ElementCollection
    @CollectionTable(name = "Buchung_KontoBewegung", joinColumns = @JoinColumn(name = "BUCHUNGID"))
    private Set<KontoBewegung> bewegungen = new HashSet<>();

    @ManyToOne(cascade = CascadeType.PERSIST)
    @JoinColumn(name = "AbrechnungId")
    private Abrechnung abrechnung;

    @ElementCollection
    @CollectionTable(name = "Buchung_TypeReference", joinColumns = @JoinColumn(name = "BUCHUNGID"))
    private Set<TypeReference> bez�ge = new HashSet<>();

    @Override
    public void addBewegungen(KontoBewegung bewegungen) {
        this.bewegungen.add(bewegungen);
    }

    @Override
    public void removeBewegungen(KontoBewegung bewegungen) {
        this.bewegungen.remove(bewegungen);
    }

    @Override
    public void addBezug(TypeReference bezug) {
        this.bez�ge.add(bezug);
    }

    @Override
    public void removeBezug(TypeReference bezug) {
        this.bez�ge.remove(bezug);
    }

    @Override
    public void setIAbrechnung(IAbrechnung abrechnung2) {
        setAbrechnung((Abrechnung) abrechnung2);
    }
>>

interface() ::= <<

package org.nill.abrechnung.interfaces;

import java.util.Date;
import java.util.Set;

import org.nill.abrechnung.values.KontoBewegung;
import org.nill.allgemein.values.TypeReference;

public interface IBuchung {

    public void addBewegungen(KontoBewegung bewegungen);

    public void removeBewegungen(KontoBewegung bewegungen);

    public void addBezug(TypeReference bezug);

    public void removeBezug(TypeReference bezug);

    public void setIAbrechnung(IAbrechnung abrechnung2);

    public java.lang.Long getBuchungId();

    public void setBuchungId(java.lang.Long buchungId);

    public Date getBuchungsDatum();

    public void setBuchungsDatum(Date buchungsDatum);

    public String getText();

    public void setText(String text);

    public int getArt();

    public void setArt(int art);

    public Set<KontoBewegung> getBewegungen();

    public void setBewegungen(Set<KontoBewegung> bewegungen);

    public Set<TypeReference> getBez�ge();

    public void setBez�ge(Set<TypeReference> bez�ge);

    public IAbrechnung getAbrechnung();

}
>>

valueobject() ::= <<

package org.nill.abrechnung.values;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Embeddable;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

@Data
@EqualsAndHashCode
@ToString
@Embeddable
public class KontoBewegung {

    @Basic
    @Column(name = "ART")
    private int art;

    @Basic
    @Column(name = "KONTONR")
    private int kontoNr;

    @Basic
    @Column(name = "BETRAG")
    @Convert(converter = org.nill.basiskomponenten.betrag.GeldKonverter.class)
    private javax.money.MonetaryAmount betrag;
}
>>