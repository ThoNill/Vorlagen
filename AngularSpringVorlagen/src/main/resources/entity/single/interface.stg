group interface ;

overwrite(model) ::= "true"
create(model) ::= "$model.clazzValue.entity$"

mypfad() ::= "interfaces"

dateiName(model) ::= "$mypfad()$/I$model.clazz.simpleName$.java"

dateiInhalt(model) ::= <<
$DATA(model,model.clazz.simpleName,mypfad())$

>>

DATA(x,classname,pfad) ::= <<
package $pfad$;



import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.List;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Enumerated;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

    $x.fieldSichten:importDefinition()$

public interface I$classname; format="cap"$ {

    Long get$classname; format="cap"$Id();

    $x.fieldSichten:elements(classname)$
}

>>

importDefinition(v) ::= <<
$if(!v.clazz.PrimitiveType)$
$if(!v.clazz.array)$
$if(!v.clazz.objectModell)$
import $v.clazz.canonicalName$;
$endif$
$endif$
$endif$
>>


elements(v,classname) ::= <<
    $documentation(v)$
    // Kind: $v.kind$
 	$(v.kind)(v,classname)$
>>

documentation(v) ::= <<
   $if(! v.documentation.empty)$
    /**
     $v.documentation$
     */$endif$
 >>

enumeration(v,classname) ::= <<	
    $value(v,classname)$
>>

LocalTime(v,classname) ::= <<
	 $value(v,classname)$
>>

LocalDate(v,classname) ::= <<
	 $value(v,classname)$
>>

LocalDateTime(v,classname) ::= <<
	 $value(v,classname)$
>>

OffsetTime(v,classname) ::= <<
	 $value(v,classname)$
>>

OffsetDateTime(v,classname) ::= <<
	 $value(v,classname)$
>>

	
value(v,classname) ::= <<	
    $v.clazz.typeDefinition$ get$v.name; format="cap"$();
    void set$v.name; format="cap"$($v.clazz.typeDefinition$ value);
>>

valueCollection(v,classname) ::= <<	

    $v.clazz.collectionTypeDefinition$ get$v.name; format="cap"$();
    void add$v.name; format="cap"$($v.clazz.collectionTypeDefinition$ x);
    void remove$v.name; format="cap"$($v.clazz.collectionTypeDefinition$ x);

>>

valueArray(v,classname) ::= <<	
	 
	 $v.clazz.arrayListTypeDefinition$[] get$v.name; format="cap"$();
	 
     void add$v.name; format="cap"$($v.clazz.arrayTypeDefinition$ x);
     void remove$v.name; format="cap"$($v.clazz.arrayTypeDefinition$ x);

>>


fromone2many(v,classname) ::= << 

     void add$v.targetName; format="cap"$(I$v.target.simpleName$ x);
     void remove$v.targetName; format="cap"$(I$v.target.simpleName$ x);

>>

toone2many(v,classname) ::= << 
      void set$v.sourceName; format="cap"$(I$v.source.simpleName$ value);
>>



frommany2many(v,classname) ::= << 
 //   private Set<$v.target.simpleName$> $v.targetName$ = new HashSet<>();
     void add$v.targetName; format="cap"$(I$v.target.simpleName$ x);
     void remove$v.targetName; format="cap"$(I$v.target.simpleName$ x);

>>

tomany2many(v,classname) ::= << 
//    private Set<$v.source.simpleName$> $v.sourceName$ = new HashSet<>();

     void add$v.sourceName; format="cap"$(I$v.source.simpleName$ x);
     void remove$v.sourceName; format="cap"$(I$v.source.simpleName$ x);

>>


fromone2one(v,classname) ::= << 
   // private $v.target.simpleName$ $v.targetName$;
     I$v.target.simpleName$ get$v.targetName; format="cap"$();
     void set$v.targetName; format="cap"$(I$v.target.simpleName$ x);

>>

toone2one(v,classname) ::= << 
    // private $v.source.simpleName$ $v.sourceName$;

   	 I$v.source.simpleName$ get$v.sourceName; format="cap"$();
     void set$v.sourceName; format="cap"$(I$v.source.simpleName$ x);

>>

fromone2oneEmbedabble(v,classname) ::= << 

//    private $v.target.simpleName$ $v.targetName$;

   	 $v.target.simpleName$ get$v.targetName; format="cap"$();
     void set$v.targetName; format="cap"$($v.target.simpleName$ x);

>>


fromone2manyEmbedabble(v,classname) ::= << 
     void add$v.targetName; format="cap"$($v.target.simpleName$ x);
     void remove$v.targetName; format="cap"$($v.target.simpleName$ x);
>>


